#!/usr/bin/env ruby
require 'optparse'
require File.join(File.dirname(File.readlink(__FILE__)), '..', 'lib', 'twig')
Dir[File.join(File.dirname(File.readlink(__FILE__)), '..', 'lib', 'twig', '*.rb')].each do |file|
  require file
end



twig = Twig.new

# Handle options from config file
File.open(File.expand_path(Twig::CONFIG_FILE)) do |f|
  opts = f.read.split("\n").inject({}) do |hsh, opt|
    key, value = opt.split(':', 2)
    hsh.merge(key.strip => value.strip)
  end

  opts.each do |key, value|
    case key
    when 'b', 'branch'  then twig.set_option(:branch,       value)
    when 'max-days-old' then twig.set_option(:max_days_old, value)
    when 'only-name'    then twig.set_option(:name_only,    value)
    when 'except-name'  then twig.set_option(:name_except,  value)
    end
  end
end

# Handle options from CLI
OptionParser.new do |opts|
  opts.on('-b BRANCH', '--branch BRANCH', twig.branches, 'Use specific branch') do |branch|
    twig.set_option(:branch, branch)
  end

  opts.on('--max-days-old AGE', 'Only list branches below a given age') do |age|
    twig.set_option(:max_days_old, age)
  end

  opts.on('--only-name PATTERN', 'Only list branches whose name matches a given pattern') do |pattern|
    twig.set_option(:name_only, pattern)
  end

  opts.on('--except-name PATTERN', 'Do not list branches whose name matches a given pattern') do |pattern|
    twig.set_option(:name_except, pattern)
  end

  opts.on_tail('--version', 'Show version') do
    puts Twig::VERSION
    exit
  end
end.parse!

# Handle remaining arguments
args = ARGV.dup
if args[0]
  # Run command binary, if any, and exit here
  command_path = `which twig-#{args[0]}`.strip
  exec(command_path) unless command_path.empty?

  # Get/set branch property
  branch = twig.options[:branch] || twig.current_branch
  if args[1]
    # `$ twig <key> <value>`
    puts twig.set_branch_property(branch, args[0], args[1])
  else
    # `$ twig <key>`
    puts twig.get_branch_property(branch, args[0])
  end
else
  # `$ twig`
  puts twig.list_branches
end
