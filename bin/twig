#!/usr/bin/env ruby
require 'optparse'
require File.join(File.dirname(File.readlink(__FILE__)), '..', 'lib', 'twig')
Dir[File.join(File.dirname(File.readlink(__FILE__)), '..', 'lib', 'twig', '*.rb')].each do |file|
  require file
end



twig = Twig.new

# Handle options
OptionParser.new do |opts|
  opts.banner = 'Usage: twig <key> [<value>] [-b <branch>] [--help]'

  opts.on('-b BRANCH', twig.branches, 'Use specific branch') do |branch|
    if twig.branches.include?(branch)
      twig.options[:branch] = branch
    else
      abort %{The branch "#{branch}" could not be found.}
    end
  end

  opts.on('--max-days-old AGE', 'Only list branches below a given age') do |age|
    if Twig::Util.numeric?(age)
      twig.options[:max_days_old] = age.to_f
    else
      abort %{The value `--max-days-old=#{age}` is invalid.}
    end
  end

  opts.on('--only-name PATTERN', 'Only list branches whose name matches a given pattern') do |pattern|
    twig.options[:name_only] = Regexp.new(pattern)
  end

  opts.on('--except-name PATTERN', 'Do not list branches whose name matches a given pattern') do |pattern|
    twig.options[:name_except] = Regexp.new(pattern)
  end

  opts.on_tail('--version', 'Show version') do
    puts Twig::VERSION
    exit
  end
end.parse!

# Handle remaining arguments
args = ARGV.dup
if args[0]
  branch = twig.options[:branch] || twig.current_branch
  if args[1]
    # `$ twig <key> <value>`
    puts twig.set_branch_property(branch, args[0], args[1])
  else
    # `$ twig <key>`
    puts twig.get_branch_property(branch, args[0])
  end
else
  # `$ twig`
  puts twig.list_branches
end
