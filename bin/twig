#!/usr/bin/env ruby
require 'optparse'
require File.join(File.dirname(File.readlink(__FILE__)), '..', 'lib', 'twig')

twig = Twig.new
abort unless twig.repo?

twig.read_config_file

# Handle options from CLI
OptionParser.new do |opts|
  desc = 'Use specific branch'
  opts.on('-b BRANCH', '--branch BRANCH', twig.branch_names, desc) do |branch|
    twig.set_option(:branch, branch)
  end

  desc = 'Only list branches below a given age'
  opts.on('--max-days-old AGE', desc) do |age|
    twig.set_option(:max_days_old, age)
  end

  desc = 'Only list branches whose name matches a given pattern'
  opts.on('--only-name PATTERN', desc) do |pattern|
    twig.set_option(:name_only, pattern)
  end

  desc = 'Do not list branches whose name matches a given pattern'
  opts.on('--except-name PATTERN', desc) do |pattern|
    twig.set_option(:name_except, pattern)
  end

  desc = 'Lists all branches regardless of age or name options; ' +
    'useful for overriding ' + File.basename(Twig::Options::CONFIG_FILE)
  opts.on('--all', desc) do |pattern|
    twig.unset_option(:max_days_old)
    twig.unset_option(:name_except)
    twig.unset_option(:name_only)
  end

  desc = 'Show version'
  opts.on_tail('--version', desc) do
    puts Twig::VERSION
    exit
  end
end.parse!

# Handle remaining arguments
args = ARGV.dup
if args[0]
  # Run command binary, if any, and exit here
  command_path = `which twig-#{args[0]}`.strip
  exec(command_path) unless command_path.empty?

  # Get/set branch property
  branch = twig.options[:branch] || twig.current_branch_name
  if args[1]
    # `$ twig <key> <value>`
    puts twig.set_branch_property(branch, args[0], args[1])
  else
    # `$ twig <key>`
    puts twig.get_branch_property(branch, args[0])
  end
else
  # `$ twig`
  puts twig.list_branches
end
